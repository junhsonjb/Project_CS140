package projectview;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;

public class MenuBarBuilder implements Observer {
	
	//fields
	private JMenuItem assemble = new JMenuItem("Assemble Source...");
	private JMenuItem load = new JMenuItem("Load File...");
	private JMenuItem exit = new JMenuItem("Exit");
	private JMenuItem go = new JMenuItem("Go");
	private ViewMediator mediator;
	
	public MenuBarBuilder(ViewMediator view) {
		mediator = view;
		view.addObserver((Observer) this); //don't know if I should have casted it, but 
											//it gives the red lines if I don't
	}
	
	@Override
	public void update(Observable arg0, Object arg1) {
		assemble.setEnabled(mediator.getCurrentState().getAssembleFileActive());
		load.setEnabled(mediator.getCurrentState().getLoadFileActive());
		go.setEnabled(mediator.getCurrentState().getStepActive());
	}
	
	JMenu createFileMenu() {
		JMenu menu = new JMenu("File");
		menu.setMnemonic(KeyEvent.VK_F);
		
		assemble.setMnemonic(KeyEvent.VK_M);
		assemble.setAccelerator(KeyStroke.getKeyStroke(
			KeyEvent.VK_M, ActionEvent.CTRL_MASK));
		assemble.addActionListener(e -> mediator.assembleFile());
		menu.add(assemble);
		
		assemble.setMnemonic(KeyEvent.VK_L);
		assemble.setAccelerator(KeyStroke.getKeyStroke(
			KeyEvent.VK_L, ActionEvent.CTRL_MASK));
		assemble.addActionListener(e -> mediator.loadFile());
		menu.add(assemble);
		
		menu.addSeparator();
		
		assemble.setMnemonic(KeyEvent.VK_E);
		assemble.setAccelerator(KeyStroke.getKeyStroke(
			KeyEvent.VK_E, ActionEvent.CTRL_MASK));
		assemble.addActionListener(e -> mediator.exit());
		menu.add(assemble);
		
		return menu;
		
	}
	
	JMenu createExecuteMenu() {
		
		go.setMnemonic(KeyEvent.VK_G);
		go.setAccelerator(KeyStroke.getKeyStroke(
			KeyEvent.VK_G, ActionEvent.CTRL_MASK));
		go.addActionListener(e -> mediator.execute());
		menu.add(assemble);
		
	}

}
